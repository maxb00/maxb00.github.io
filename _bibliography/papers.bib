---
---

@string{aps = {American Physical Society,}}

@article{10.5555/3512733.3512734,
  author = {Barlow, Max and Cazalas, Ibraheem and Robinson, Chase and Cazalas, Jonathan},
  title = {MOCSIDE: An Open-Source and Scalable Online IDE and Auto-Grader for Introductory Programming Courses},
  year = {2021},
  issue_date = {October 2021},
  publisher = {Consortium for Computing Sciences in Colleges},
  address = {Evansville, IN, USA},
  volume = {37},
  number = {5},
  issn = {1937-4771},
  abstract = {Programming is learned through practice, with said practice in introductory programming courses often translating to a prohibitively large number of assignments, increasing the grading workload for faculty and/or teaching assistants. In short, this is unsustainable. Several publishers and a few notable companies have provided meritable solutions, although most are plagued with problems including minimal problem sets, limited customization options, high cost, and even a disconnect with the pedagogical needs within academia. This paper presents a survey of the more popular solutions currently available, followed by a presentation of our newly-developed web application, MOCSIDE: open-source and scalable online IDE and auto-grader for computer science education.},
  journal = {J. Comput. Sci. Coll.},
  month = {oct},
  pages = {11–20},
  numpages = {10}
}

@inproceedings{10.1145/3478432.3499125,
  author = {Cazalas, Jonathan and Barlow, Max and Cazalas, Ibraheem and Robinson, Chase},
  title = {MOCSIDE: An Open-Source and Scalable Online IDE and Auto-Grader for Computer Science Education},
  year = {2022},
  isbn = {9781450390712},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3478432.3499125},
  doi = {10.1145/3478432.3499125},
  abstract = {Programming is learned through practice, with said practice in introductory programming courses often translating to a prohibitively large number of assignments, increasing the grading workload for faculty and/or teaching assistants. In short, this is unsustainable. Several publishers and a few notable companies have provided meritable auto-grading solutions, although most are plagued with problems including minimal problem sets, limited customization options, high cost, and at times even a disconnect with the pedagogical needs of academia. This poster presents our newly-developed web application, MOCSIDE, an open-source and scalable online IDE and auto-grader for computer science education. Results indicate a positive user experience from students and instructors alike, with cost savings, ease of use, and code collaboration highlighted as key features.},
  booktitle = {Proceedings of the 53rd ACM Technical Symposium on Computer Science Education V. 2},
  pages = {1114},
  numpages = {1},
  keywords = {cs2, cs1, auto-grading, computer science education, online ide},
  location = {Providence, RI, USA},
  series = {SIGCSE 2022},
  selected = {true}
}

@inproceedings{FlowfreeAtFURC,
  author = {Barlow, Maxwell and Riekens, Spencer, and Bennett, William, and Eicholtz, Matthew},
  title = {Going with the Flow: An AI Approach to Solving the Puzzle Game FlowFree},
  month = {feb},
  year = {2023},
  publisher = {Florida Undergraduate Research Association},
  abstract = {Can we solve FlowFree? FlowFree, also known as Zig-Zag Numberlink, is a popular puzzle game where the player connects ‘flows’ on a board with the goal of finishing each connection, avoiding intersecting flows, and filling up the entire game board. We employed two methods for solving puzzles: A* search and boolean satisfiability (SAT). A* searched through a tree of board states, choosing between states one cell apart based on a heuristic that considered distance to a completed flow. The search tree was pruned with the help of several constraints of varying complexity to check for. Constraint extrapolation further allowed the framing of FlowFree as a constraint satisfaction problem (CSP), which allowed the solving of boards as SAT problems. Solving as a CSP involves the conversion of puzzles into SAT variables, indicating the truth value of possible flow directions and color at each individual cell, arranged into conjunctive normal form clauses representing the constraints, feeding to a SAT solver and subsequently decoded from a set of true variables to a solved puzzle. SAT showed significant speed improvement over A*, with the difference being more pronounced in larger puzzle sizes. Puzzles were collected from the FlowFree mobile app and converted using computer vision to text files; A GUI application was also created to allow inputting custom puzzles as well as partially solving a puzzle before solve time.},
  booktitle = {Proceedings of the 2023 Florida Undergraduate Research Conference},
  keywords = {A*, heuristic, satisfiability, reduction},
  location = {Miami, FL, USA},
  series = {FURC 2023},
  selected = {true}
}


@misc{ConceptualAnalysisSymposium, 
  author = {Barlow, Maxwell and Jeiter-Johnson, Sara Jo, and Kipper, Jens},
  title = {Machine Learning and Conceptual Complexity},
  month = {aug},
  year = {2022},
  publisher = {University of Rochester},
  abstract = {The conceptual complexity of an idea is an incredibly abstract feature to measure. We employ basic testing methods with neural networks like Large Language Models (LLMs) and multi-modal classifiers to begin to hypothesize about the markers of conceptual complexity in pre-trained and piblished models.},
  location = {Rochester, NY, USA},
  keywords = {language, conceptual complexity, conceptual analysis, transformers, classification},
  booktitle = {Kearns Center Summer Research Symposium},
  series = {Music, Media, and Minds Data Science REU},
}

@unpublished{ConceptualAnalysisPaper,
  author = {Barlow, Maxwell and Kipper, Jens and Ma, Tianyi},
  title = {Conceptual Complexity, Conceptual Analysis, and Machine Learning},
  year = {2024},
}